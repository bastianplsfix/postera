/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root.tsx";
import { Route as ListsRouteImport } from "./routes/lists.tsx";
import { Route as AboutRouteImport } from "./routes/about.tsx";
import { Route as TodoIdRouteImport } from "./routes/$todoId.tsx";
import { Route as IndexRouteImport } from "./routes/index.tsx";
import { Route as ListListIdRouteImport } from "./routes/list.$listId.tsx";

const ListsRoute = ListsRouteImport.update({
  id: "/lists",
  path: "/lists",
  getParentRoute: () => rootRouteImport,
} as any);
const AboutRoute = AboutRouteImport.update({
  id: "/about",
  path: "/about",
  getParentRoute: () => rootRouteImport,
} as any);
const TodoIdRoute = TodoIdRouteImport.update({
  id: "/$todoId",
  path: "/$todoId",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);
const ListListIdRoute = ListListIdRouteImport.update({
  id: "/list/$listId",
  path: "/list/$listId",
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/$todoId": typeof TodoIdRoute;
  "/about": typeof AboutRoute;
  "/lists": typeof ListsRoute;
  "/list/$listId": typeof ListListIdRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/$todoId": typeof TodoIdRoute;
  "/about": typeof AboutRoute;
  "/lists": typeof ListsRoute;
  "/list/$listId": typeof ListListIdRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/$todoId": typeof TodoIdRoute;
  "/about": typeof AboutRoute;
  "/lists": typeof ListsRoute;
  "/list/$listId": typeof ListListIdRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/$todoId" | "/about" | "/lists" | "/list/$listId";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/$todoId" | "/about" | "/lists" | "/list/$listId";
  id: "__root__" | "/" | "/$todoId" | "/about" | "/lists" | "/list/$listId";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  TodoIdRoute: typeof TodoIdRoute;
  AboutRoute: typeof AboutRoute;
  ListsRoute: typeof ListsRoute;
  ListListIdRoute: typeof ListListIdRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/lists": {
      id: "/lists";
      path: "/lists";
      fullPath: "/lists";
      preLoaderRoute: typeof ListsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/about": {
      id: "/about";
      path: "/about";
      fullPath: "/about";
      preLoaderRoute: typeof AboutRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/$todoId": {
      id: "/$todoId";
      path: "/$todoId";
      fullPath: "/$todoId";
      preLoaderRoute: typeof TodoIdRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/list/$listId": {
      id: "/list/$listId";
      path: "/list/$listId";
      fullPath: "/list/$listId";
      preLoaderRoute: typeof ListListIdRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TodoIdRoute: TodoIdRoute,
  AboutRoute: AboutRoute,
  ListsRoute: ListsRoute,
  ListListIdRoute: ListListIdRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
